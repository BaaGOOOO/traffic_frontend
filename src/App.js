import React, { useEffect, useState } from 'react';
import axios from 'axios';
import Map from './Map';
import StatisticsPage from './StatisticsPage';
import CityStatistics from './CityStatistics';
import Register from './Register';
import Login from './Login';
import HourlyAccidents from './HourlyAccidents'; // √öJ üî•
import './App.css';
import { BrowserRouter as Router, Routes, Route, Link } from 'react-router-dom';
import TopDaysChart from './TopDaysChart';
import WeatherImpactChart from './WeatherImpactChart';
import AdminPage from './AdminPage';
import AddAccident from './AddAccident';


// üîπ Egyszer≈± f≈ëoldal, ami mindig l√°tszik
function HomePage() {
  return (
    <div>
      <h1>√údv√∂z√∂llek az Adatelemz≈ë alkalmaz√°sban!</h1>
      <p>
        Ez az alkalmaz√°s az <strong>√ìbudai Egyetem</strong> szakdolgozati projektje keret√©ben k√©sz√ºlt, melynek c√©lja a
        <strong> v√°rosi k√∂zleked√©si balesetek adatainak elemz√©se √©s vizualiz√°ci√≥ja</strong>.
      </p>
      <p>
        A rendszer k√©pes k√ºl√∂nb√∂z≈ë t√≠pus√∫ statisztik√°k k√©sz√≠t√©s√©re, baleseti adatok r√∂gz√≠t√©s√©re √©s azok val√≥s idej≈±
        megjelen√≠t√©s√©re egy interakt√≠v t√©rk√©pen. A felhaszn√°l√≥k √°ttekinthetik a baleseteket v√°ros, id≈ëpont, balesett√≠pus √©s
        id≈ëj√°r√°si viszonyok alapj√°n is.
      </p>
    </div>
  );
}

function App() {
  const [loggedInUser, setLoggedInUser] = useState(null);
  const [userRole, setUserRole] = useState(null); // √öJ üî•

  const handleLogin = (username, role) => {
    setLoggedInUser(username);
    setUserRole(role); // üî• elmentj√ºk a szerepet
  };

  const handleLogout = () => {
    setLoggedInUser(null);
    localStorage.removeItem('token');
  };

  return (
    <Router>
      <div>
        {/* üîπ Navig√°ci√≥s men√º */}
        <nav>
          <Link to="/">F≈ëoldal</Link>
          {loggedInUser && (
            <>
              <Link to="/map">T√©rk√©p</Link>
              <Link to="/statisztikak">Baleseti statisztik√°k</Link>
              <Link to="/varos-statisztika">V√°rosi statisztika</Link>
              <Link to="/hourly-stats">√ìr√°nk√©nti statisztika</Link>
              <Link to="/topnapok">Top napok</Link>
              <Link to="/id≈ëj√°ras">Id≈ëj√°r√°s statisztika</Link>
              <Link to="/rogzites">Baleset r√∂gz√≠t√©se</Link>

              {userRole === 'admin' && (
                <Link to="/admin">Admin</Link>  // üîê CSAK ADMIN L√ÅTJA
              )}
            </>
          )}

          {!loggedInUser && (
            <>
              <Link to="/register">Regisztr√°ci√≥</Link>
              <Link to="/login">Bejelentkez√©s</Link>
            </>
          )}
          {loggedInUser && (
            <>
              <span>üë§ {loggedInUser}</span>
              <button onClick={handleLogout}>Kijelentkez√©s</button>
            </>
          )}
        </nav>

        {/* üîπ √ötvonalak */}
        <Routes>
          <Route path="/" element={<HomePage />} />
          {loggedInUser && (
            <>
              <Route path="/map" element={<MainPage />} />
              <Route path="/statisztikak" element={<StatisticsPage />} />
              <Route path="/varos-statisztika" element={<CityStatistics />} />
              <Route path="/hourly-stats" element={<HourlyAccidents />} /> {/* √öJ */}
              <Route path="/topnapok" element={<TopDaysChart />} />
              <Route path="/id≈ëj√°ras" element={<WeatherImpactChart />} />
              <Route path="/rogzites" element={<AddAccident />} />
              {userRole === 'admin' && <Route path="/admin" element={<AdminPage />} />} {/* csak admin! */}
            </>
          )}
          <Route path="/register" element={<Register />} />
          <Route path="/login" element={<Login onLogin={handleLogin} />} />
        </Routes>
      </div>
    </Router>
  );
}

// üîπ T√©rk√©pes f≈ëoldal (csak bejelentkezve haszn√°lhat√≥)
function MainPage() {
  const [accidents, setAccidents] = useState([]);
  const [selectedDate, setSelectedDate] = useState('');
  const [selectedType, setSelectedType] = useState('√ñsszes');
  const [selectedCity, setSelectedCity] = useState('');
  const [cities, setCities] = useState([]);

  useEffect(() => {
    axios.get('https://traffic-backend-6wxr.onrender.com/cities')
      .then(response => setCities(response.data))
      .catch(error => console.error("Hiba a v√°rosok lek√©r√©sekor:", error));
  }, []);

  const fetchAccidents = () => {
    axios.get('https://traffic-backend-6wxr.onrender.com/accidents', {
      params: { date: selectedDate, accident_type: selectedType, city: selectedCity }
    })
      .then(response => {
        setAccidents(response.data);
      })
      .catch(error => console.error("Hiba az adatok lek√©r√©sekor:", error));
  };

  return (
    <div>
      <h1>Baleseti adatok</h1>

      <label>D√°tum:
        <input type="date" value={selectedDate} onChange={e => setSelectedDate(e.target.value)} />
      </label>

      <label>Baleset t√≠pusa:
        <select value={selectedType} onChange={e => setSelectedType(e.target.value)}>
          <option value="√ñsszes">√ñsszes</option>
          <option value="G√°zol√°s">G√°zol√°s</option>
          <option value="√útk√∂z√©s">√útk√∂z√©s</option>
          <option value="Borul√°s">Borul√°s</option>
          <option value="Koccan√°s">Koccan√°s</option>
          <option value="T√∂megbaleset">T√∂megbaleset</option>
        </select>
      </label>

      <label>V√°ros:
        <select value={selectedCity} onChange={e => setSelectedCity(e.target.value)}>
          <option value="">√ñsszes</option>
          {cities.map((city, index) => (
            <option key={index} value={city}>{city}</option>
          ))}
        </select>
      </label>

      <button onClick={fetchAccidents}>Lek√©rdez√©s</button>

      <h2>Baleseti t√©rk√©p</h2>
      <Map accidents={accidents} />
    </div>
  );
}

export default App;
